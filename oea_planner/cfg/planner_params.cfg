#!/usr/bin/env python
# Planner configuration

#initialize ros and import the parameter generator
PACKAGE="oea_planner"
#import roslib; roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#define parameters
#The add function adds a parameter to the list of parameters.
#gen.add("name", type, level, "description", default, min, max)

#gen.add("H_high_cost", int_t, 0, "High Cost H value", 0, 0, 1000000)
#gen.add("Penalty", int_t, 0, "Penalty", 1, 1, 1000) #not used anymore

gen.add("level_closest", int_t, 0, "closest to obstacles", 4, 0, 10) #closest to obstacles
gen.add("level_middle", int_t, 0, "middle to obstacles", 3, 0, 10) #closest to obstacles
gen.add("level_farthest", int_t, 0, "farthest to obstacles", 2, 0, 10) #closest to obstacles
gen.add("cost_scale", int_t, 0, "cost_scale", 1000000, 0, 3000000) #closest to obstacles

gen.add("penalize_heading_change", bool_t, 0, "penalize_heading_change", True) # penalize heading changes in the path

gen.add("heading_cost", int_t, 0, "heading_cost", 2, 0, 20) #penalize heading change



#generate the necessary files and exit the program
#The second parameter is the name of a node this could run in (used to generate documentation only),
#The third parameter is a name prefix the generated files will get (e.g. "<name>Config.h" for c++, or "<name>Config.py" for python
#NOTE: The third parameter should be equal to the cfg file name, without extension. Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them.
exit(gen.generate(PACKAGE, "oea_planner", "planner_params"))
