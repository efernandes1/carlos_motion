#!/usr/bin/env python
# Oea controller configuration

#initialize ros and import the parameter generator
PACKAGE="oea_controller"
#import roslib; roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#define parameters
#The add function adds a parameter to the list of parameters.
#gen.add("name", type, level, "description", default, min, max)

gen.add("Kp", double_t, 0, "Proportional Gain", 1.5, 0.0, 20.0)
gen.add("Kd", double_t, 0, "Derivative Gain", 0.0, 0.0, 2.0)
gen.add("Kff", double_t, 0, "Feedforward Gain", 0.0, 0.0, 10.0)

gen.add("max_linear_vel", double_t, 0, "max_linear_vel (m/s)", 0.3, 0.0, 1.0)
gen.add("max_angular_vel", double_t, 0, "max_angular_vel (rad/s)", 0.4, 0.0, 1.0)

gen.add("tolerance_d", double_t, 0, "Distance Tolerance for middle points (meters)", 0.01, 0.0, 0.5)
gen.add("tolerance_yaw_deg", double_t, 0, "Yaw Tolerance for middle points (degrees)", 0.01, 0.0, 90)

gen.add("tolerance_d_last_point", double_t, 0, "Distance Tolerance for LAST point (meters)", 0.01, 0.0, 0.5)
gen.add("tolerance_yaw_deg_last_point", double_t, 0, "Yaw Tolerance for LAST point (degrees)", 0.01, 0.0, 20)

#gen.add("timer_rate", int_t, 0, "timer rate", 100, 1, 1000)

gen.add("k_r", double_t, 0, "curvature", 0.0, 0.0, 1.0)
gen.add("use_yaw_on_middle_points",   bool_t,   0, "use yaw information on middle points",  True)

gen.add("deaccel_distance_thresh", double_t, 0, "distance  threshold to deaccel (meters)", 0.18, 0.0, 0.5)

gen.add("error_deviation_deg", double_t, 0, "angle threshold to go straight (degrees)", 5.0, 0.0, 15.0)
gen.add("next_target_timeout", int_t, 0, "timeout to go to next target when stuck (seconds)", 20, 0, 120)

gen.add("delta_angle_stuck_th", int_t, 0, "angle threshold for being stuck (degrees)", 5, 0, 20)
gen.add("erro_theta2_stuck_th_low", int_t, 0, "erro_theta2 (lower) threshold for being stuck (degrees)", 80, 60, 90)
gen.add("erro_theta2_stuck_th_sup", int_t, 0, "erro_theta2 (superior) threshold for being stuck (degrees)", 100, 90, 120)

gen.add("obstacle_timeout", int_t, 0, "obstacle timeout to abort (seconds)", 20, 0, 60)
gen.add("always_show_protective_laser", bool_t, 0, "always_show_protective_laser", False)

#Distance is measured FROM THE (end of) TRACKS and NOT FROM THE LASER reference
# change these names 
gen.add("forward_protective_distance", double_t, 0, "forward protective laser distance FROM THE TRACKS (meters)", 0.1, 0.0, 2.0) 
gen.add("lateral_protective_distance", double_t, 0, "lateral protective laser distance FROM THE TRACKS (meters)", 0.1, 0.0, 2.0)
gen.add("forward_warning_distance", double_t, 0, "forward warning laser distance (meters)", 0.3, 0.0, 2.0)
gen.add("lateral_warning_distance", double_t, 0, "lateral warning laser distance (meters)", 0.2, 0.0, 2.0)

#gen.add("outliers_protective_forward_dist", double_t, 0, "protective_outliers_forward_distance (meters)", 0.5, 0.0, 3.0)
#gen.add("outliers_protective_lateral_dist", double_t, 0, "protective_outliers_lateral_distance (meters)", 0.6, 0.0, 3.0)
#gen.add("outliers_warning_forward_dist", double_t, 0, "warning_outliers_forward_distance (meters)", 0.7, 0.0, 3.0)
#gen.add("outliers_warning_lateral_dist", double_t, 0, "warning_outliers_lateral_distance (meters)", 0.8, 0.0, 3.0)


#generate the necessary files and exit the program
#The second parameter is the name of a node this could run in (used to generate documentation only),
#The third parameter is a name prefix the generated files will get (e.g. "<name>Config.h" for c++, or "<name>Config.py" for python
#NOTE: The third parameter should be equal to the cfg file name, without extension. Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them.
exit(gen.generate(PACKAGE, "oea_controller", "ctrl_params"))
